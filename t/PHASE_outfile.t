#! /usr/bin/perl
use strict;
use warnings;
use Test::More tests => 9;
BEGIN { use_ok 'stefans_libs::MyProject::PHASE_outfile' }

my $PHASE_outfile = PHASE_outfile->new();
is_deeply( ref($PHASE_outfile), 'PHASE_outfile',
	'simple test of function PHASE_outfile -> new()' );

my ( $datafile, $value, $exp, @values );
$datafile = "data/PHASE_outfile.txt"   if ( -f "data/PHASE_outfile.txt" );
$datafile = "t/data/PHASE_outfile.txt" if ( -f "t/data/PHASE_outfile.txt" );

$PHASE_outfile->read_file($datafile);

foreach (qw(BESTPAIRS_SUMMARY LIST_SUMMARY)) {
	is_deeply( ref( $PHASE_outfile->{$_} ), $_,
		"the module $_ was created" );
}

@values = $PHASE_outfile->get_chromosome_ids();

is_deeply( \@values, [ 1,10,11,12,13,14,15,16,17,18,19,2,20,3,4,5,6,7,8,9], "we gcould read all chromosome infomations");
@values = $PHASE_outfile->get_sample_ids ();
@values = @values[0..10,scalar(@values-1)];
is_deeply( \@values, [100, 1000, 1007,101,1013,1023,1028,1031,1036,104,1056, 11974], "we could read all sample_id infomations");
$value = $PHASE_outfile->get_sample_id_groups('dominant');

$exp = {
  '6' => [ '11397', '1135', '1132', '1084' ],
  '12' => [ '11353', '11355' ],
  '15' => [ '11747' ],
  '14' => [ '11004', '11004', '1069', '1069', '1120', '1120', '11573', '11573' ],
  '4' => [ '11093', '1065', '11023', '11174', '11145', '11145', '11248', '11515', '1125', '1007', '1007', '11748', '11362', '11362', '1186', '11266', '11488', '1106', '1106', '11463', '11115', '11429', '11661', '11661', '11568', '11878', '11377', '11017', '11017', '11948', '11948', '11647', '11051', '11758', '11758', '11351', '11351', '11771', '101', '11664', '11371', '1116', '11703', '11648', '11396', '1074', '1074', '11596', '1110', '11199', '11630', '11010', '11774', '112', '1157', '1157', '1152', '1131', '11092', '11309', '11309', '11057', '11057', '11524', '1066', '11473', '11386', '11934', '11598', '1137', '1137', '11095', '11095', '11024', '11885', '11066', '11677', '1118', '1118', '1000', '11887', '11058', '11058', '11665', '11665', '11651', '119', '11541', '11139', '11352', '11206', '11503', '11957', '1180', '11683', '11683', '11782', '11052', '11052', '113', '11224', '11143', '11271', '11779', '11155', '11716', '11383', '11329', '11949', '11525', '11755', '11349', '1077', '1126', '1175', '11747', '11561', '11561', '11119', '11119', '11020', '11310', '11310', '11493', '100', '11937', '11937', '1036', '11416', '11416', '11919', '11919', '11148', '11049', '1114', '11553', '11407', '11407', '11479', '11479', '1085', '11404', '11404', '1134', '11014', '1073', '11571', '11571', '11974', '1156', '11365', '11372', '11040', '1062', '11332' ],
  '16' => [ '11002', '11002', '1111', '1111', '11624', '11497', '11497', '11585', '11585' ],
  '13' => [ '11093', '11696', '11696', '11619', '11619', '1065', '11023', '11174', '11248', '11515', '1125', '1031', '1031', '11748', '1013', '1013', '1186', '11510', '11510', '11266', '11111', '11111', '11488', '11463', '11115', '11429', '11568', '1058', '1058', '11730', '11730', '11397', '11878', '11377', '11647', '11051', '1107', '1107', '11764', '11764', '11613', '11613', '1093', '1093', '1023', '1023', '11771', '101', '1067', '1067', '11353', '11664', '11371', '1116', '11703', '11648', '11396', '1079', '1079', '11390', '11390', '1028', '1028', '11327', '11327', '11513', '11513', '1080', '1080', '11596', '1110', '11199', '1119', '1119', '11545', '11545', '1123', '1123', '11630', '1142', '1142', '11010', '11650', '11650', '112', '11389', '11389', '1152', '1131', '11092', '104', '104', '11836', '11836', '11524', '1066', '11945', '11945', '1135', '1149', '1149', '11473', '11386', '11934', '11681', '11681', '11598', '11609', '11609', '11024', '11007', '11007', '11031', '11131', '11131', '11912', '11912', '11885', '11066', '11677', '11468', '11468', '1000', '11236', '11236', '1057', '1057', '11887', '11651', '11126', '11126', '119', '11599', '11599', '1160', '1160', '11616', '11616', '11139', '11428', '11428', '1105', '1105', '11352', '11624', '11575', '11575', '11062', '11062', '11117', '11117', '11206', '11503', '11957', '1180', '11122', '11122', '1108', '1108', '11782', '11539', '11539', '11841', '11841', '11171', '11171', '11442', '11442', '11933', '11933', '113', '11559', '11559', '11224', '11465', '11465', '11612', '11612', '11143', '11954', '11954', '1056', '1056', '1132', '1094', '1094', '11271', '11779', '11155', '11260', '11260', '11366', '11366', '11198', '11198', '11716', '11077', '11077', '11383', '11745', '11745', '11234', '11234', '11329', '11949', '11525', '11755', '11903', '11903', '11349', '1077', '1126', '1175', '11906', '11384', '11384', '11917', '11917', '1092', '1092', '11935', '11935', '1173', '1173', '1084', '11691', '11691', '11020', '11493', '100', '11690', '11690', '1036', '1148', '1148', '11871', '11871', '11148', '11355', '11049', '1114', '11622', '11622', '1060', '1060', '1085', '1134', '11014', '1073', '11322', '11322', '11974', '1156', '11259', '11259', '1103', '1103', '11671', '11671', '11365', '11462', '11462', '11372', '11040', '1062', '11332', '11402', '11402' ],
  '5' => [ '11774', '11031', '11541', '11906', '11553' ]
};
is_deeply( $value, $exp, "we get the right grouping 'dominant'" );

$value = $PHASE_outfile->get_sample_id_groups('recessive');
$exp = {
  '4' => [ '11145', '1007', '11362', '1106', '11661', '11017', '11948', '11758', '11351', '1074', '1157', '11309', '11057', '1137', '11095', '1118', '11058', '11665', '11683', '11052', '11561', '11119', '11310', '11937', '11416', '11919', '11407', '11479', '11404', '11571' ],
  '13' => [ '11696', '11619', '1031', '1013', '11510', '11111', '1058', '11730', '1107', '11764', '11613', '1093', '1023', '1067', '1079', '11390', '1028', '11327', '11513', '1080', '1119', '11545', '1123', '1142', '11650', '11389', '104', '11836', '11945', '1149', '11681', '11609', '11007', '11131', '11912', '11468', '11236', '1057', '11126', '11599', '1160', '11616', '11428', '1105', '11575', '11062', '11117', '11122', '1108', '11539', '11841', '11171', '11442', '11933', '11559', '11465', '11612', '11954', '1056', '1094', '11260', '11366', '11198', '11077', '11745', '11234', '11903', '11384', '11917', '1092', '11935', '1173', '11691', '11690', '1148', '11871', '11622', '1060', '11322', '11259', '1103', '11671', '11462', '11402' ],
  '16' => [ '11002', '1111', '11497', '11585' ],
  '14' => [ '11004', '1069', '1120', '11573' ]
};
is_deeply( $value, $exp, "we get the right grouping 'recessive'" );

$value = $PHASE_outfile->get_sample_id_groups('combination');
$exp = {
  '4.5' => [ '11774', '11541', '11553' ],
  '4.15' => [ '11747' ],
  '13.16' => [ '11624' ],
  '14.14' => [ '11004', '1069', '1120', '11573' ],
  '5.13' => [ '11031', '11906' ],
  '12.13' => [ '11353', '11355' ],
  '16.16' => [ '11002', '1111', '11497', '11585' ],
  '4.13' => [ '11093', '1065', '11023', '11174', '11248', '11515', '1125', '11748', '1186', '11266', '11488', '11463', '11115', '11429', '11568', '11878', '11377', '11647', '11051', '11771', '101', '11664', '11371', '1116', '11703', '11648', '11396', '11596', '1110', '11199', '11630', '11010', '112', '1152', '1131', '11092', '11524', '1066', '11473', '11386', '11934', '11598', '11024', '11885', '11066', '11677', '1000', '11887', '11651', '119', '11139', '11352', '11206', '11503', '11957', '1180', '11782', '113', '11224', '11143', '11271', '11779', '11155', '11716', '11383', '11329', '11949', '11525', '11755', '11349', '1077', '1126', '1175', '11020', '11493', '100', '1036', '11148', '11049', '1114', '1085', '1134', '11014', '1073', '11974', '1156', '11365', '11372', '11040', '1062', '11332' ],
  '13.13' => [ '11696', '11619', '1031', '1013', '11510', '11111', '1058', '11730', '1107', '11764', '11613', '1093', '1023', '1067', '1079', '11390', '1028', '11327', '11513', '1080', '1119', '11545', '1123', '1142', '11650', '11389', '104', '11836', '11945', '1149', '11681', '11609', '11007', '11131', '11912', '11468', '11236', '1057', '11126', '11599', '1160', '11616', '11428', '1105', '11575', '11062', '11117', '11122', '1108', '11539', '11841', '11171', '11442', '11933', '11559', '11465', '11612', '11954', '1056', '1094', '11260', '11366', '11198', '11077', '11745', '11234', '11903', '11384', '11917', '1092', '11935', '1173', '11691', '11690', '1148', '11871', '11622', '1060', '11322', '11259', '1103', '11671', '11462', '11402' ],
  '4.4' => [ '11145', '1007', '11362', '1106', '11661', '11017', '11948', '11758', '11351', '1074', '1157', '11309', '11057', '1137', '11095', '1118', '11058', '11665', '11683', '11052', '11561', '11119', '11310', '11937', '11416', '11919', '11407', '11479', '11404', '11571' ],
  '6.13' => [ '11397', '1135', '1132', '1084' ]
};
is_deeply( $value, $exp, "we get the right grouping 'combination'" );
my @array;
foreach my $key ( keys %{$value} ){
	push ( @array, @{$value->{$key}});
}
foreach $value ( @array) {
	print "$value\n";
}
#print "\$exp = ".root->print_perl_var_def( \@array ).";\n";

